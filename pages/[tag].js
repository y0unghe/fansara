import React, { useRef } from 'react'
import Head from 'next/head'
import Sidebar from '../components/Sidebar'
import { useRecoilValue } from "recoil";
import { modalState } from "../atoms/modalAtom";
import Modal from '../components/Modal';
import { getSession, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { db } from "../firebase";
import { ArrowLeftIcon, Cog6ToothIcon, XMarkIcon } from "@heroicons/react/24/outline"
import Post from '../components/Post';
import {
    collection,
    onSnapshot,
    orderBy,
    where,
    query,
    limit,
    doc
} from "@firebase/firestore";
import Widgets from '../components/Widgets';
import { ColorRing } from 'react-loader-spinner'

function UserPage() {
    const isOpen = useRecoilValue(modalState);
    const router = useRouter();
    const { tag } = router.query;
    const [posts, setPosts] = useState([]);
    const [user, setUser] = useState(null);
    const { data: session } = useSession();
    const [subscribing, setSubscribing] = useState(false);
    const [txHash, setTxHash] = useState("");
    const [subscription, setSubscription] = useState(null);

    useEffect(
        () =>
            onSnapshot(query(collection(db, "users"),
                where("tag", "==", tag),
                limit(1)), (snapshot) => {
                    if (snapshot.docs.length > 0) {
                        setUser(snapshot.docs[0].data())
                    }
                }), [db, tag]
    )

    useEffect(
        () =>
            onSnapshot(query(collection(db, "posts"),
                where("tag", "==", tag),
                orderBy("timestamp", "desc"),
                limit(10)), (snapshot) => {
                    setPosts(snapshot.docs);
                }), [db, tag]
    )

    useEffect(
        () => {
            if (!user) return;

            const ref = doc(db, 'users', session.user.uid, 'subscriptions', user.id);
            return onSnapshot(ref, (snapshot) => {
                if (snapshot.exists()) {
                    const data = snapshot.data();
                    setSubscription(data);
                }
            });
        }, [user]
    )

    const subscribe = async () => {
        if (subscribing) {
            return;
        }

        const price = user.pricePerMonth;
        const priceNum = parseFloat(price);
        const priceInSun = priceNum * 1000000;

        if (window.tronLink.ready) {
            setSubscribing(true);

            const tronWeb = window.tronLink.tronWeb;

            const host = tronWeb.solidityNode.host;
            if (host !== 'https://api.shasta.trongrid.io') {
                setSubscribing(false);
                console.log('Please switch to Shasta network');
                return;
            }

            const from = tronWeb.defaultAddress.base58;
            const to = "TQ37FUR6Ptq9gHVZga9FFJBWhaAGVFXgTw";
            const tx = await tronWeb.transactionBuilder.sendTrx(to, priceInSun, from);

            try {
                const signedTx = await tronWeb.trx.sign(tx);
                const res = await tronWeb.trx.sendRawTransaction(signedTx);
                console.log(res);
                const txid = res.txid;
                console.log(txid);
                setTxHash(txid);
            } catch (error) {
                console.log(error);
            }

            setSubscribing(false);
        }
    }

    const formatAddress = (address) => {
        return `${address.substring(0, 8)}...${address.substring(
            address.length - 8
        )}`;
    }

    const expiredAt = (timestamp) => {
        const date = new Date(timestamp);
        date.setMonth(date.getMonth() + 1);
        return date.toLocaleDateString();
    }

    return (
        <div>
            <Head>
                <title>{tag} - Fansara</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className='min-h-screen flex max-w-[1250px] mx-auto'>
                <Sidebar />
                {
                    user && (
                        <div className='ml-[300px] flex-grow border-l border-r border-gray-200 border-1'>
                            <div className='flex sticky top-0 z-50 bg-white flex-row space-x-3 p-3 py-2'>
                                <ArrowLeftIcon
                                    onClick={() => router.push("/")}
                                    className='w-5 cursor-pointer hover:text-blue-500' />
                                <div className='flex flex-col'>
                                    <h1 className=''>{user.username}</h1>
                                    <div className='flex flex-row space-x-1 text-xs text-gray-400'>
                                        <span>1.1K Posts</span>
                                        <span>233.4K Likes</span>
                                        <span>1.22M Fans</span>
                                    </div>
                                </div>
                            </div>
                            <div className='flex flex-row justify-between mt-20 pr-5'>
                                <div className='flex flex-col items-start mx-5 space-y-3 pb-5'>
                                    <img
                                        className='rounded-full h-25 w-25'
                                        src={user.userImg}
                                        alt={user.username} />
                                    <div className='flex flex-col'>
                                        <h1 className='text-lg font-medium'>{user.username}</h1>
                                        <span className='text-gray-400 text-sm'>@{user.tag}</span>
                                    </div>
                                </div>
                                {
                                    session.user.tag === tag && (
                                        <div className='pt-10'>
                                            <button
                                                onClick={() => router.push("/settings/profile")}
                                                className='py-2 px-4 rounded-full border-[1px] border-gray-200 hover:bg-blue-200 text-sm'>
                                                <div className='flex flex-row space-x-2'>
                                                    <Cog6ToothIcon className='text-blue-500 w-5' />
                                                    <h1 className='text-blue-500'>Edit Profile</h1>
                                                </div>
                                            </button>
                                        </div>
                                    )
                                }
                            </div>
                            <div className='border-y-[1px] border-y-gray-100'></div>
                            {
                                subscription
                                    ?
                                    <div className='flex justify-between p-5'>
                                        <h1 className='text-sm text-gray-500'>Subscribed</h1>
                                        <span className='text-sm text-gray-400'>Expired at {expiredAt(subscription.timestamp)}</span>
                                    </div>
                                    :
                                    session.user.tag !== tag && (
                                        <div
                                            onClick={subscribe}
                                            className='flex flex-col px-5 space-y-3 py-5'>
                                            <p className='text-gray-400 text-sm'>Subscribe</p>
                                            <div className={`flex flex-row ${subscribing ? "cursor-default" : "cursor-pointer hover:bg-blue-600"}  items-center text-white px-5 text-sm justify-between h-[50px] rounded-full bg-blue-500`}>
                                                <span>{subscribing ? 'Subscribing' : 'Subscribe'}</span>
                                                {
                                                    subscribing
                                                        ?
                                                        <ColorRing
                                                            visible={true}
                                                            height="40"
                                                            width="40"
                                                            ariaLabel="blocks-loading"
                                                            wrapperStyle={{}}
                                                            wrapperClass="blocks-wrapper"
                                                            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}
                                                        /> : <span className='text-sm'>{user.pricePerMonth ? `$${user.pricePerMonth} per month` : 'Free'}</span>
                                                }
                                            </div>
                                        </div>
                                    )

                            }
                            <div className='border-y-[1px] border-y-gray-100'></div>
                            <div className='pb-72'>
                                {
                                    posts.map((post) => (
                                        <Post isPostPage={false} key={post.id} id={post.id} post={post.data()} />
                                    ))
                                }
                            </div>
                        </div>
                    )
                }
                <Widgets />
                {isOpen && <Modal />}
                {
                    subscribing && (
                        <div className='fixed z-50 right-5 top-5'>
                            <div class="bg-blue-600 shadow-lg mx-auto w-96 max-w-full text-sm pointer-events-auto bg-clip-padding rounded-lg block mb-3" id="static-example" role="alert" aria-live="assertive" aria-atomic="true" data-mdb-autohide="false">
                                <div class="bg-blue-600 flex justify-between items-center py-2 px-3 bg-clip-padding border-b border-blue-500 rounded-t-lg">
                                    <p class="font-bold text-white flex items-center">
                                        <ColorRing
                                            visible={true}
                                            height="30"
                                            width="30"
                                            ariaLabel="blocks-loading"
                                            wrapperStyle={{}}
                                            wrapperClass="blocks-wrapper"
                                            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}
                                        />
                                        Pending Transaction</p>
                                    <div class="flex items-center">
                                        <button
                                            onClick={() => {
                                                setSubscribing(false);
                                            }}
                                            type="button"
                                            class="btn-close btn-close-white box-content w-4 h-4 ml-2 text-white border-none rounded-none opacity-50 focus:shadow-none focus:outline-none focus:opacity-100 hover:text-white hover:opacity-75 hover:no-underline" data-mdb-dismiss="toast" aria-label="Close">
                                            <XMarkIcon />
                                        </button>
                                    </div>
                                </div>
                                <div class="p-3 bg-blue-600 rounded-b-lg break-words text-white">
                                    Waiting for confirmation:
                                    <a
                                        target="_blank"
                                        className='underline pl-1'
                                        href={`https://shasta.tronscan.org/#/transaction/${txHash}`}>
                                        {formatAddress(txHash)}
                                    </a>
                                </div>
                            </div>
                        </div>
                    )
                }
            </main>
        </div>
    )
}

export default UserPage

export async function getServerSideProps(context) {
    const session = await getSession(context);

    return {
        props: {
            session,
        },
    };
}